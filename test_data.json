{
    "guide": "## Gu\u00eda de Integraci\u00f3n de Verificaci\u00f3n de Antecedentes con Truora (GoLang y Gin)\n\n### Introducci\u00f3n\n\nEsta gu\u00eda te ayudar\u00e1 a integrar la API de Verificaci\u00f3n de Antecedentes de Truora en tu aplicaci\u00f3n GoLang utilizando el framework Gin.  Utilizaremos los endpoints proporcionados para crear y obtener los resultados de las verificaciones de antecedentes.\n\n### Configuraci\u00f3n de Autenticaci\u00f3n\n\nPara usar la API de Truora, necesitar\u00e1s una clave de API.  Esta clave se debe incluir en el encabezado `Authorization` de cada solicitud, con el formato `Bearer {tu_clave_api}`.  Aseg\u00farate de mantener tu clave de API segura y no la compartas en tu c\u00f3digo fuente.\n\nEn tu aplicaci\u00f3n GoLang, puedes configurar la autenticaci\u00f3n de la siguiente manera:\n\n```go\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc withAuth(c *gin.Context) {\n\ttoken := c.Request.Header.Get(\"Authorization\")\n\tif token == \"\" {\n\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n\t\treturn\n\t}\n\tc.Next()\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.Use(withAuth)\n\t// ... tus rutas...\n\trouter.Run(\":8080\")\n}\n```\n\n### Roadmap\n\n1. **Crear una verificaci\u00f3n de antecedentes:**  Env\u00eda una solicitud POST a `https://api.checks.truora.com/v1/checks` con los datos necesarios para la verificaci\u00f3n.  El cuerpo de la solicitud depender\u00e1 del tipo de verificaci\u00f3n que se realice. Consulta la [API Reference](https://docs.checks.truora.com/#post-/v1/checks) para los campos obligatorios.\n2. **Obtener el ID de la verificaci\u00f3n:** La respuesta a la solicitud POST incluir\u00e1 un `check_id`.  Guarda este ID para poder obtener los resultados posteriormente.\n3. **Obtener los resultados de la verificaci\u00f3n:** Env\u00eda una solicitud GET a `https://api.checks.truora.com/v1/checks/{check_id}` usando el `check_id` obtenido en el paso anterior.  La respuesta incluir\u00e1 los resultados de la verificaci\u00f3n, incluyendo los scores globales, ID y nombre.\n4. **Manejar los Webhooks (Opcional):** Para obtener resultados autom\u00e1ticamente, configura los webhooks siguiendo la gu\u00eda en [Webhooks guide](https://dev.truora.com/guides/webhook_rule/index.html). Esto evitar\u00e1 la necesidad de realizar consultas GET peri\u00f3dicas.\n\n### C\u00f3digo de Ejemplo\n\n**Crear verificaci\u00f3n:**\n\n```go\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc createCheck(c *gin.Context) {\n\t// ... datos de la verificaci\u00f3n ...\n\tjsonData, _ := json.Marshal(data)\n\tresp, err := http.Post(\"https://api.checks.truora.com/v1/checks\", \"application/json\", bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\t// Manejar error\n\t}\n\tdefer resp.Body.Close()\n\t// ... procesar la respuesta ...\n}\n```\n\n**Obtener resultados:**\n\n```go\nfunc getCheckResults(c *gin.Context) {\n\tcheckID := c.Param(\"check_id\")\n\tresp, err := http.Get(fmt.Sprintf(\"https://api.checks.truora.com/v1/checks/%s\", checkID))\n\tif err != nil {\n\t\t// Manejar error\n\t}\n\tdefer resp.Body.Close()\n\t// ... procesar la respuesta ...\n}\n```\n\n**Recuerda reemplazar los comentarios con la l\u00f3gica adecuada para manejar la solicitud, la respuesta y los errores.**\n\n### Errores Comunes\n\n* **Clave API incorrecta:** Aseg\u00farate de usar la clave API correcta y que tenga los permisos necesarios.\n* **Formato de solicitud incorrecto:** Verifica que el formato de la solicitud JSON sea correcto seg\u00fan la [API Reference](https://docs.checks.truora.com/#post-/v1/checks).\n* **Datos de entrada insuficientes:** Aseg\u00farate de proporcionar todos los datos necesarios para el tipo de verificaci\u00f3n que est\u00e1s realizando.\n* **Errores de red:**  Maneja adecuadamente los errores de red como timeouts y conexiones fallidas.\n\n### Mejores Pr\u00e1cticas\n\n* **Manejo de errores:** Implementa un manejo de errores robusto para todas las interacciones con la API.\n* **Validaci\u00f3n de datos:** Valida los datos de entrada antes de enviarlos a la API.\n* **Seguridad:**  Protege tu clave API y maneja las credenciales de forma segura.\n* **Documentaci\u00f3n:** Documenta tu c\u00f3digo adecuadamente para facilitar el mantenimiento y la comprensi\u00f3n.\n* **Limpieza de recursos:** Cierra las conexiones HTTP correctamente despu\u00e9s de su uso.\n* **Retries:** Implementar un mecanismo de reintentos en caso de fallos transitorios de la API. \n\nRecuerda consultar la [API Reference](https://docs.checks.truora.com/#post-/v1/checks) y la [Webhooks guide](https://dev.truora.com/guides/webhook_rule/index.html) para obtener informaci\u00f3n m\u00e1s detallada sobre los endpoints y la configuraci\u00f3n de webhooks."
}